<?xml version="1.0"?>
<launch>
    <arg name="use_ekf" default="true"/>
    
    <!-- The robot URDF model and world file -->
    <arg name="model" default="$(find xacro)/xacro '$(find igvc2023)/urdf/orange.xacro'" />
    <arg name="world" default="$(find igvc2023)/world/course_v2.world"/>

    <!-- Initial pose of robot in the world--> 
    <arg name="x"     default="0"/>
    <arg name="y"     default="0"/>
    <arg name="z"     default="0.1"/>
    <arg name="roll"  default="0"/>
    <arg name="pitch" default="0"/>
    <arg name="yaw"   default="0"/>

    <arg name="use_vlp16"        default="false"/> <!-- Line detection method -->

    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name"   value="$(arg world)"/>
        <arg name="paused"       value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui"          value="true"/>
        <arg name="headless"     value="false"/>
        <arg name="debug"        value="false"/>
    </include>


    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <param name="robot_description" command="$(arg model)"/>
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" output="screen"
     args="-urdf -model orange -param robot_description -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>

    <!-- Ground segmentation, Pointcloud to laserscan, Merge scans -->
    <include file="$(find igvc2023)/launch/segmentation.launch"/>

    <!-- Line detection node -->
    <group unless="$(arg use_vlp16)">
        <include file="$(find line_detection)/launch/igvc2022_line_detection.launch">
            <arg name="is_sim" value="true"/>
        </include>
    </group>

    <group if="$(arg use_vlp16)">
        <!-- Add intensity to pointcloud based on image within simulation -->
        <node pkg="line_detection_vlp16" type="fake_intensity_pcd.py" name="fake_intensity_pcd" output="screen">
            <remap from="/points_in"    to="/velodyne_points"/>
            <remap from="/points_out"   to="/velodyne_points_sim"/>

            <param name="map_image_path"    value="$(find igvc2023)/models/course_v2/materials/textures/igvc2022_course_image_v2_1400x1200.png"/>
            <param name="map_size"          value="43 37"/>
            <param name="origin"            value="0 16.5"/>
            <param name="urdf_model_name"   value="orange"/>
            <param name="sensor_height"     value="0.8015"/>
        </node>

        <!-- Publish detected line as pointcloud -->
        <node pkg="line_detection_vlp16" type="line_detection.py" name="line_detection" output="screen">
            <remap from="/points_in"    to="/velodyne_points_sim"/>
            <rosparam command="load" file="$(find line_detection_vlp16)/param/line_detection_params.yaml" />
        </node>

        <!-- Dynamic reconfigure -->
        <node pkg="rqt_gui" type="rqt_gui" name="reconfigure" args="-s reconfigure"/>
    </group>

    <!-- Sensor fusion 
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization" clear_params="true" output="screen">
        <rosparam command="load" file="$(find igvc2023)/config/ekf.yaml" />
        <remap from="odom0" to="/odom" />
        <remap from="odom1" to="/odometry/gps" />
        <remap from="imu0" to="/imu" />
    </node>
    
    <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform" clear_params="true" output="screen">
        <rosparam command="load" file="$(find igvc2023)/config/navsatekf.yaml" />
        <remap from="/imu/data" to="/imu" />
        <remap from="/gps/fix" to="/fix" />
    </node>
    -->
    <node name="combine_dr_measurements" pkg="robot_pose_ekf" type="robot_pose_ekf">
        <remap from="odom"         to="/odom"/>
        <remap from="imu_data"     to="/imu"/>
        <param name="freq"                 value="30.0"/>
        <param name="sensor_timeout"       value="1.0"/>
        <param name="publish_tf"           value="true"/>
        <param name="odom_used"            value="true"/>
        <param name="imu_used"             value="true"/>
        <param name="vo_used"              value="false"/>
        <param name="output_frame"         value="odom"/>
        <param name="base_footprint_frame" value="base_footprint"/>
    </node>
    
    
    <!-- Convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen"/>
    
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="true"/>
        <param name="rate"    value="50"/>
    </node>
    
</launch>
