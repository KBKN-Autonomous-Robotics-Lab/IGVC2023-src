<?xml version="1.0"?>

<launch>
  <arg name="model"                  value="$(find xacro)/xacro '$(find igvc2022)/urdf/igvc_robot.xacro'"/>
  <arg name="calibration"            value="$(find igvc2022)/params/VLP16db.yaml"/>
  <arg name="ypspur_params"          value="/usr/local/share/robot-params/igvc-robot.param"/>
  <arg name="scan_dev"               value="/dev/sensors/hokuyo_urg"/>
  <arg name="led_dev"                value="/dev/arduino"/>
  <arg name="imu_dev"                value="/dev/sensors/imu"/>
  
  <!-- Node for reading parameters -->
  <node name="ypspur_coordinator_bridge" pkg="igvc2022" type="ypspur_coordinator_bridge" args="$(arg ypspur_params)" output="screen"/>
  
  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description" command="$(arg model)"/>
  
  <!-- Node to setting up Arduino serial communication for LEDs -->
  <node pkg="rosserial_python" type="serial_node.py" name="serial_node_LED">
    <param name="port" value="$(arg led_dev)"/>
    <param name="baud" value="115200"/>
  </node>
  
  <!-- Node to setting up Arduino serial communication for IMU sensor -->
  <node pkg="rosserial_python" type="serial_node.py" name="serial_node_IMU">
    <param name="port" value="$(arg imu_dev)"/>
    <param name="baud" value="115200"/>
  </node>
  
  <!-- Node for setting up 2D-LiDAR via USB connection -->
  <node pkg="urg_node" type="urg_node" name="urg_node">
    <param name="frame_id"                  value="/hokuyo_link"/>
    <param name="serial_port"               value="$(arg scan_dev)"/>
    <param name="angle_min"   type="double" value="-1.22"/>
    <param name="angle_max"   type="double" value="1.22"/>
    <remap from="/scan"       to="/hokuyo_scan"/>
  </node>

  <!-- Run velodyne_pointcloud/TransformNodelet in a nodelet manager for a VLP-16 -->
  <!-- Start nodelet manager -->
  <node pkg="nodelet" type="nodelet" name="velodyne_link_nodelet_manager" args="manager" output="screen"/>
    
  <!-- Load driver nodelet into it -->
  <node pkg="nodelet" type="nodelet" name="velodyne_link_nodelet_manager_driver" args="load velodyne_driver/DriverNodelet velodyne_link_nodelet_manager">
    <param name="device_ip"              value=""/>
    <param name="frame_id"               value="velodyne_link"/>
    <param name="model"                  value="VLP16"/>
    <param name="pcap"                   value=""/>
    <param name="port"                   value="2368"/>
    <param name="read_fast"              value="false"/>
    <param name="read_once"              value="false"/>
    <param name="repeat_delay"           value="0.0"/>
    <param name="rpm"                    value="600.0"/>
    <param name="gps_time"               value="false"/>
    <param name="pcap_time"              value="false"/>
    <param name="cut_angle"              value="-0.01"/>
    <param name="timestamp_first_packet" value="false"/>
  </node>
    
  <!-- Start transform nodelet -->
  <node pkg="nodelet" type="nodelet" name="velodyne_link_nodelet_manager_transform" args="load velodyne_pointcloud/TransformNodelet velodyne_link_nodelet_manager">
    <param name="model"          value="VLP16"/>
    <param name="calibration"    value="$(arg calibration)"/>
    <param name="fixed_frame"    value=""/>
    <param name="target_frame"   value=""/>
    <param name="max_range"      value="130.0"/>
    <param name="min_range"      value="0.4"/>
    <param name="organize_cloud" value="false"/>
  </node>

  <!-- Converts a 3D Point Cloud into a 2D laser scan -->
  <!-- This is useful for making devices like the Kinect appear like a laser scanner for 2D-based algorithms (e.g. laser-based SLAM) -->
  <node pkg="igvc2022" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
    <!--<remap from="cloud_in" to="velodyne_points"/>-->
    <remap from="cloud_in" to="ground_segmentation/obstacle_cloud"/>
    <rosparam>
      target_frame: velodyne_link # Leave disabled to output scan in pointcloud frame
      transform_tolerance: 0.01
      min_height: -0.7 #-0.4
      max_height: 1.5
      angle_min: -2.3565
      angle_max: 2.3565
      angle_increment: 0.008711645
      scan_time: 0.03333
      range_min: 0.2
      range_max: 100.0
      use_inf: true

      # Concurrency level, affects number of pointclouds queued for processing and number of threads used
      # 0 : Detect number of cores
      # 1 : Single threaded
      # 2->inf : Parallelism level
      concurrency_level: 1
    </rosparam>
  </node>
    
  <!-- Node for setting control parameters of the robot -->
  <node name="igvc_robot_driver_node" pkg="igvc2022" output="screen" type="igvc_robot_driver_node"/>
    
  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find igvc2022)/config/igvc_robot_control.yaml" command="load"/>

  <!-- Node for loading the controllers -->
  <!-- publish /igvc_robot_odom and /igvc_robot/cmd_vel -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="igvc_robot joint_state_controller"/>

  <!-- Convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>
    
  <node name="combine_dr_measurements" pkg="robot_pose_ekf" type="robot_pose_ekf">
    <remap from="odom"         to="igvc_robot/odom"/>
    <remap from="imu_data"     to="imu"/>
    <param name="freq"                 value="30.0"/>
    <param name="sensor_timeout"       value="1.0"/>
    <param name="publish_tf"           value="true"/>
    <param name="odom_used"            value="true"/>
    <param name="imu_used"             value="true"/>
    <param name="vo_used"              value="false"/>
    <param name="output_frame"         value="odom"/>
    <param name="base_footprint_frame" value="base_link"/>
  </node>
  
  <!-- Start camera -->
  <node pkg="cv_camera" type="cv_camera_node" name="cv_camera">
    <param name="device_path" value="/dev/sensors/insta360_air"/>
    <param name="image_width" value="1478"/>
    <param name="image_height" value="736"/>
  </node>
	
  <!-- Line detection node -->
  <include file="$(find line_detection)/launch/igvc2022_line_detection.launch">
    <arg name="is_sim" value="false"/>
  </include>
  
  
  <!-- Ground segmentation -->
  <node name="ground_segmentation" pkg="linefit_ground_segmentation_ros" type="ground_segmentation_node">
    <rosparam command="load" file="$(find igvc2022)/params/segmentation_params.yaml"/>
    <param name="input_topic" value="/velodyne_points" />
    <param name="ground_output_topic" value="/ground_cloud" />
    <param name="obstacle_output_topic" value="obstacle_cloud" />
  </node>
  
   <!--<node pkg="ira_laser_tools" name="laserscan_multi_merger" type="laserscan_multi_merger" output="screen">
	<param name="destination_frame" value="velodyne_link"/>
	<param name="scan_destination_topic" value="/scan_multi"/>
	<param name="laserscan_topics" value ="/scan /hokuyo_scan" /> 
	<param name="angle_min" value="-2.3565"/>
	<param name="angle_max" value="2.3565"/>
	<param name="angle_increment" value="0.008711645"/>
	<param name="scan_time" value="0.0333333"/>
	<param name="range_min" value="0.10"/>
	<param name="range_max" value="100.0"/>
  </node>-->
    
</launch>
